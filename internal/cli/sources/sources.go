// Copyright 2024 The Perses Authors
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package sources

import (
	"archive/tar"
	"compress/gzip"
	"fmt"
	"io"
	"net/http"
	"os"
	"path/filepath"
	"strings"

	"github.com/perses/perses/internal/cli/config"
	"github.com/sirupsen/logrus"
	"golang.org/x/mod/semver"
)

const (
	archiveName = "sources.tar.gz"
	minVersion  = "v0.47.0"
)

// DownloadAndExtract downloads the given Perses release archive & extracts the content of the given folder from it
func DownloadAndExtract(folder string, destination string, maxFileSizeBytes int64, version string) error {
	if err := os.MkdirAll(filepath.Join(destination, folder), os.ModePerm); err != nil {
		return fmt.Errorf("error creating the destination folder structure: %v", err)
	}

	if err := download(version); err != nil {
		return fmt.Errorf("error downloading sources: %v", err)
	}
	defer cleanup()

	if err := extractFolderToDst(folder, destination, maxFileSizeBytes); err != nil {
		return fmt.Errorf("error extracting sources: %v", err)
	}

	return nil
}

// download downloads the sources of the given Perses release
func download(version string) error {
	url := fmt.Sprintf("https://github.com/perses/perses/archive/refs/tags/%s.tar.gz", version)
	// NB: wrongly spotted as unsecure by gosec; we are validating/sanitizing the string interpolated upfront thus no risk here
	response, err := http.Get(url) // nolint: gosec
	if err != nil {
		return err
	}
	defer response.Body.Close()

	if response.StatusCode != http.StatusOK {
		return fmt.Errorf("error: Unable to fetch release. Status code: %d", response.StatusCode)
	}

	// Save the content to a local file
	outFile, err := os.Create(archiveName)
	if err != nil {
		return fmt.Errorf("error creating file: %v", err)
	}
	defer outFile.Close()

	_, err = io.Copy(outFile, response.Body)
	if err != nil {
		return fmt.Errorf("error copying content to file: %v", err)
	}

	logrus.Debug("Perses release archive downloaded successfully")

	return nil
}

// cleanup removes the local archive generated by download
func cleanup() {
	if err := os.Remove(archiveName); err != nil {
		fmt.Printf("error removing the temp archive: %v\n", err)
	}
}

// extractFolderToDst extracts the content of the given folder from the sources archive to the destination path
func extractFolderToDst(folder string, destination string, maxFileSizeBytes int64) error {
	file, err := os.Open(archiveName)
	if err != nil {
		return err
	}
	defer file.Close()

	// Open the tar reader
	gzipReader, err := gzip.NewReader(file)
	if err != nil {
		return err
	}
	defer gzipReader.Close()
	tarReader := tar.NewReader(gzipReader)

	// Extract each relevant file to the destination path
	folderFound := false
	for {
		header, tarErr := tarReader.Next()
		if tarErr == io.EOF {
			break
		}
		if tarErr != nil {
			return tarErr
		}

		// Remove the wrapping folder for following evaluations
		srcPath := removeFirstFolder(header.Name)

		if srcPath == folder {
			folderFound = true
		}
		if !strings.HasPrefix(srcPath, folder) {
			continue
		}

		dstPath := fmt.Sprintf("%s/%s", destination, srcPath)

		switch header.Typeflag {
		case tar.TypeDir:
			if folderErr := os.Mkdir(dstPath, os.ModePerm); err != nil {
				return fmt.Errorf("can't create dir %s: %v", dstPath, folderErr)
			}
			logrus.Debugf("dir %s created succesfully", dstPath)
		case tar.TypeReg:
			outFile, createErr := os.Create(dstPath)
			if createErr != nil {
				return fmt.Errorf("can't create file %s: %v", dstPath, createErr)
			}
			defer outFile.Close()
			if _, copyErr := io.CopyN(outFile, tarReader, maxFileSizeBytes); copyErr != nil {
				if copyErr == io.EOF {
					continue
				}
				return fmt.Errorf("can't copy content from %s: %v", header.Name, copyErr)
			}
			logrus.Debugf("file %s extracted succesfully", dstPath)
		default:
			return fmt.Errorf("unknown type: %b in %s", header.Typeflag, header.Name)
		}
	}

	if !folderFound {
		return fmt.Errorf("folder %s not found in archive", folder)
	}

	return nil
}

func removeFirstFolder(filePath string) string {
	separatorChar := "/" // force the usage of forward slash for strings comparison

	// Split the path into individual components
	components := strings.Split(filePath, separatorChar)

	// Remove the top folder if there is at least one folder in the path
	if len(components) > 1 {
		components = components[1:]
	}

	// Join the components back into a path
	resultPath := strings.Join(components, separatorChar)

	return resultPath
}

func EnsureMinValidVersion(version string) error {
	// Validate the format of the provided version
	if !semver.IsValid(version) {
		return fmt.Errorf("invalid version: %s", version)
	}

	// Verify that it is >= to the minimum required version
	if semver.Compare(version, minVersion) == -1 {
		return fmt.Errorf("version should be at least %s or higher", minVersion)
	}
	return nil
}

func GetProperVersion(version string) (string, error) {
	inferedVersion := version

	// If no version provided, let's try to get the version from the Perses server
	if inferedVersion == "" {
		logrus.Debug("version flag not provided, retrieving version from Perses server..")
		apiClient, err := config.Global.GetAPIClient()
		if err != nil {
			return "", fmt.Errorf("you need to either provide a version or be connected to a Perses server")
		}

		health, err := apiClient.V1().Health().Check()
		if err != nil {
			logrus.WithError(err).Debug("can't reach Perses server")
			return "", fmt.Errorf("can't retrieve version from Perses server")
		}
		inferedVersion = health.Version
	}

	// Add "v" prefix to the version if not present
	if !strings.HasPrefix(inferedVersion, "v") {
		inferedVersion = fmt.Sprintf("v%s", inferedVersion)
	}

	return inferedVersion, nil
}
