// NB: the .cuepart extension is a homemade one: It designates a partial CUE file, meaning that
// it contains some placeholders for later string replacements, that are not valid to CUE syntax.

import (
    "regexp"
    "strconv"
    "strings"
    "math"
    "list"
)

#mapping: {
    // mapping table for the unit attribute (key = grafana unit, value = perses equivalent)
    unit: {
        // time units
        ms: "milliseconds"
        s: "seconds"
        m: "minutes"
        h: "hours"
        d: "days"
        dtdurations: "seconds"
        dtdurationms: "milliseconds"
        // percent units
        percent: "percent"
        percentunit: "percent-decimal"
        // decimal units
        // TODO
        // bytes units
        bytes: "bytes"
        decbytes: "bytes"
        // throughput units
        bps: "bits/sec"
        Bps: "bytes/sec"
        cps: "counts/sec"
        // TODO add mappings for all throughput units
    }
    // mapping table for the calculation attribute (key = grafana unit, value = perses equivalent)
    calc: {
        // Values with a single potential mapping.
        first: "first"
        firstNotNull: "first-number"
        lastNotNull: "last-number"
        min: "min"
        max: "max"

        // Both keys can be used for "Last" depending on the version of grafana
        // and how the calculation is being used (e.g. chart vs table legend
        // value).
        current: "last"
        last: "last"

        // Both keys can be used for "Mean" depending on the version of grafana
        // and how the calculation is being used (e.g. chart vs table legend
        // value).
        avg: "mean"
        mean: "mean"

        // Both keys can be used for "Mean" depending on the version of grafana
        // and how the calculation is being used (e.g. chart vs table legend
        // value).
        total: "sum"
        sum: "sum"
    }
    // mapping array for the sort attribute (index = grafana sort id, value = perses equivalent)
    sort: ["none", "alphabetical-asc", "alphabetical-desc", "numerical-asc", "numerical-desc", "alphabetical-ci-asc", "alphabetical-ci-desc"]
    color: {
        // mapping array for some color attributes (index = color name in Grafana, value = hexadecimal equivalent that Perses can deal with)
        "dark-red": "#c4162a"
        "semi-dark-red": "#e02f44"
        "red": "#f2495c"
        "light-red": "#ff7383"
        "super-light-red": "#ffa6b0"

        "dark-orange": "#fa6400"
        "semi-dark-orange": "#ff780a"
        "orange": "#ff9830"
        "light-orange": "#ffb357"
        "super-light-orange": "#ffcb7d"
        
        "dark-green": "#37872d"
        "semi-dark-green": "#56a64b"
        "green": "#73bf69"
        "light-green": "#96d98d"
        "super-light-green": "#c8f2c2"
                
        "dark-blue": "#1f60c4"
        "semi-dark-blue": "#3274d9"
        "blue": "#5794f2"
        "light-blue": "#8ab8ff"
        "super-light-blue": "#c0d8ff"
                        
        "dark-purple": "#8f3bb8"
        "semi-dark-purple": "#a352cc"
        "purple": "#b877d9"
        "light-purple": "#b877d9"
        "super-light-purple": "#deb6f2"
    }
}
#defaultCalc: "last"

kind: "Dashboard",
metadata: {
    name: #grafanaDashboard.uid
},
spec: {
    duration: "1h" // fixed value, we don't really care translating this one
    display: {
        name: #grafanaDashboard.title
    }
    variables: [ for _, grafanaVar in #grafanaDashboard.templating.list {
        _displayConversion: {
            #var: _

            if #var.label != _|_ if #var.label != "" {
                display: name: #var.label
            }
            if #var.description != _|_ {
                display: description: #var.description
            }
            if #var.hide != _|_ if #var.hide > 0 {
                display: hidden: true
            }
        }
        _singleVarConversion: this={
            #var: _
            #constant: _

            kind: "TextVariable"
            spec: {
                name: #var.name
                _displayConversion & {#var: this.#var}
                constant: #constant
                value: #var.query
            }
        }
        if grafanaVar.type == "constant" {
            _singleVarConversion & {#var: grafanaVar, #constant: true}
        }
        if grafanaVar.type == "textbox" {
            _singleVarConversion & {#var: grafanaVar, #constant: false}
        }
        if grafanaVar.type != "constant" && grafanaVar.type != "textbox" {
            kind: "ListVariable"
            spec: {
                name: grafanaVar.name
                _displayConversion & {#var: grafanaVar}
                allowAllValue: *grafanaVar.includeAll | false // the default value tackles the case of variables of type `interval` that don't have such field
                allowMultiple: *grafanaVar.multi | false      // the default value tackles the case of variables of type `interval` that don't have such field
                if allowAllValue if grafanaVar.allValue != _|_ {
                    customAllValue: grafanaVar.allValue
                }
                // TODO: enable (back) capturing regexp migration
                capturingRegexp?: _|_
                // Currently we don't migrate the regex field since (for the moment) one of the most used plugin,
                // PromQL Variable, works differently in Perses than in Grafana: We are getting the values
                // corresponding to the provided labelName, thus capturingRegexp applies on label values, while in
                // Grafana the regexp applies on the full PromQL expression, thus migrating it as-is just makes the
                // Perses variable return nothing - manual patching is required. We can't add logic here to decide
                // whether the regexp should be migrated or not, because at this step we have no idea about the
                // plugin used by the considered variable.
                //
                // if grafanaVar.regex != _|_ {
                //     capturingRegexp: grafanaVar.regex
                // }
                if grafanaVar.sort != _|_ if #mapping.sort[grafanaVar.sort] != _|_ {
                    sort: #mapping.sort[grafanaVar.sort]
                }
                if (*(grafanaVar.current.value) | _|_ ) != _|_ {
                    defaultValue: grafanaVar.current.value
                }
                #var: grafanaVar
                plugin: [ // switch
                    %(conditional_variables)
                ][0]
            }
        }
    }]
    // go through the top-level panels 1st time, to fill the panels section of Perses
    panels: { for grafanaPanelId, grafanaPanel in #grafanaDashboard.panels {
        // function-like pattern to factorize the panel conversion logic
        _panelConversion: {
            #panel: _

            kind: "Panel"
            spec: {
                display: {
                    name: [ // switch
                        if #panel.title != _|_ if #panel.title != "" {
                            #panel.title
                        },
                        "empty"
                    ][0]
                    description: *#panel.description | ""
                }
                plugin: [ // switch
                    %(conditional_panels)
                ][0]
                // in case of no targets, the resulting empty array will be removed via unmarshaling in Go (omitempty)
                queries: [ if #panel.targets != _|_ for _, target in #panel.targets {
                    kind: "TimeSeriesQuery"
                    spec: {
                        #target: target
                        plugin: [ // switch
                            %(conditional_timeseries_queries)
                        ][0]
                    }
                }]
            }
        }
        // if the current panel is a row, go through its children panels
        if grafanaPanel.panels != _|_ {
            for innerPanelId, innerPanel in grafanaPanel.panels { 
                "\(grafanaPanelId)_\(innerPanelId)": {
                    _panelConversion & {#panel: innerPanel}
                }
            }
        }
        // else
        if grafanaPanel.panels == _|_ { 
            "\(grafanaPanelId)": {
                _panelConversion & {#panel: grafanaPanel}
            }
        }
    }}
    // function-like pattern to factorize the position conversion logic
    _positionConversion: {
        #gridPos: _
        #id: _
        // it may happen that a grafana panel coordinate has a decimal, which we have to get rid of
        x: math.Round(#gridPos.x)
        y: math.Round(#gridPos.y)
        width: math.Round(#gridPos.w)
        height: math.Round(#gridPos.h)
        content: {
            "$ref": "#/spec/panels/\(#id)"
        }
    }
    // we have to go through the panels again here, since in Grafana a panel embeds its position info while in Perses panels & layouts are split
    layouts: [
        // create a first grid to gather standalone panels, if there are some (= only if first encountered panel is not a row)
        if #grafanaDashboard.panels[0] != _|_ if #grafanaDashboard.panels[0].panels == _|_ {
            {
                kind: "Grid"
                spec: {
                    // go through the top-level panels a 2nd time and append an item only for the ones that are not rows neither belong to a row
                    items: [ for grafanaPanelId, grafanaPanel in #grafanaDashboard.panels if grafanaPanel.panels == _|_ {
                        _positionConversion & {#gridPos: grafanaPanel.gridPos, #id: grafanaPanelId}
                    }]
                }
            }
        },
        // go through the top-level panels a 3rd time & match only the rows, to create the corresponding grids
        for grafanaPanelId, grafanaPanel in #grafanaDashboard.panels if grafanaPanel.panels != _|_ { // if the panel is a row
            kind: "Grid"
            spec: {
                display: {
                    title: grafanaPanel.title,
                    collapse: {
                        open: !grafanaPanel.collapsed
                    }
                }
                // go through the children panels of the current row
                items: [ for innerPanelId, innnerPanel in grafanaPanel.panels {
                    _positionConversion & {#gridPos: innnerPanel.gridPos, #id: "\(grafanaPanelId)_\(innerPanelId)"}
                }]
            }
        }
    ]
}
