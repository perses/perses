import (
    "regexp"
    "strings" 
    "math"
)

#mapping: {
    // mapping table for the unit attribute (key = grafana unit, value = perses equivalent)
    unit: {
        ms: "Milliseconds"
        s: "Seconds"
        m: "Minutes"
        h: "Hours"
        d: "Days"
        percent: "Percent"
        percentunit: "PercentDecimal"
        bytes: "Bytes"
        decbytes: "Bytes"
    }
    // mapping table for the calculation attribute (key = grafana unit, value = perses equivalent)
    calc: {
        // Values with a single potential mapping.
        first: "first"
        firstNotNull: "first-number"
        lastNotNull: "last-number"
        min: "min"
        max: "max"

        // Both keys can be used for "Last" depending on the version of grafana
        // and how the calculation is being used (e.g. chart vs table legend
        // value).
        current: "last"
        last: "last"

        // Both keys can be used for "Mean" depending on the version of grafana
        // and how the calculation is being used (e.g. chart vs table legend
        // value).
        avg: "mean"
        mean: "mean"

        // Both keys can be used for "Mean" depending on the version of grafana
        // and how the calculation is being used (e.g. chart vs table legend
        // value).
        total: "sum"
        sum: "sum"
    }
}
#defaultCalc: "Last"

kind: "Dashboard",
metadata: {
    name: #grafanaDashboard.uid
},
spec: {
    duration: "1h" // fixed value, we don't really care translating this one
    display: {
    	name: #grafanaDashboard.title
    }
    variables: [ for _, grafanaVar in #grafanaDashboard.templating.list {
        if grafanaVar.type == "constant" {
            kind: "TextVariable"
            spec: {
                name: grafanaVar.name
                value: grafanaVar.query
            }
        }
        if grafanaVar.type != "constant" {
            kind: "ListVariable"
            spec: {
                name: grafanaVar.name
                if grafanaVar.label != _|_ || grafanaVar.description != _|_ || grafanaVar.hide > 0 {
                    display: {
                        name: [ // switch
                            if grafanaVar.label != _|_ if grafanaVar.label != "" {
                                grafanaVar.label
                            },
                            grafanaVar.name
                        ][0]
                        if grafanaVar.description != _|_ {
                            description: grafanaVar.description
                        }
                        if grafanaVar.hide > 0 {
                            hidden: true
                        }
                    }
                }
                allowAllValue: *grafanaVar.includeAll | false // the default value tackles the case of variables of type `interval` that don't have such field
                allowMultiple: *grafanaVar.multi | false       // the default value tackles the case of variables of type `interval` that don't have such field
                // defaultValue: nothing to map to this field
                #var: grafanaVar
                plugin: [ // switch
                    %(conditional_variables)
                ][0]
            }
        }
    }]
    // go through the top-level panels 1st time, to fill the panels section of Perses
    panels: { for grafanaPanelId, grafanaPanel in #grafanaDashboard.panels {
        // if the current panel is a row, go through its children panels
        if grafanaPanel.panels != _|_ {
            for innerPanelId, innerPanel in grafanaPanel.panels { 
                "\(grafanaPanelId)_\(innerPanelId)": {
                    kind: "Panel"
                    spec: {
                        display: {
                            name: *innerPanel.title | "empty"
                            description: *innerPanel.description | ""
                        }
                        #panel: innerPanel
                        plugin: [ // switch
                            %(conditional_panels)
                        ][0]
                        // in case of no targets, the resulting empty array will be removed via unmarshaling in Go (omitempty)
                        queries: [ if innerPanel.targets != _|_ for _, target in innerPanel.targets {
                            kind: "TimeSeriesQuery"
                            spec: {
                                #target: target
                                plugin: [ // switch
                                    %(conditional_timeseries_queries)
                                ][0]
                            }
                        }]
                    }
                }
            }
        }
        if grafanaPanel.panels == _|_ { // else
            "\(grafanaPanelId)": {
                kind: "Panel"
                spec: {
                    display: {
                        name: *grafanaPanel.title | "empty"
                        description: *grafanaPanel.description | ""
                    }
                    #panel: grafanaPanel
                    plugin: [ // switch
                        %(conditional_panels)
                    ][0]
                    queries: [ if grafanaPanel.targets != _|_ for _, target in grafanaPanel.targets {
                        kind: "TimeSeriesQuery"
                        spec: {
                            #target: target
                            plugin: [ // switch
                                %(conditional_timeseries_queries)
                            ][0]
                        }
                    }]
                }
            }
        }
    }},
    // we have to go through the panels again here, since in Grafana a panel embeds its position info while in Perses panels & layouts are split
    layouts: [
        // create a first grid to gather standalone panels
        {
            kind: "Grid"
            spec: {
                // go through the top-level panels a 2nd time and append an item only for the ones that are not rows neither belong to a row
                items: [ for grafanaPanelId, grafanaPanel in #grafanaDashboard.panels if grafanaPanel.panels == _|_ {
                    // it may happen that a grafana panel coordinate has a decimal
                    x: math.Round(grafanaPanel.gridPos.x)
                    y: math.Round(grafanaPanel.gridPos.y)
                    width: math.Round(grafanaPanel.gridPos.w)
                    height: math.Round(grafanaPanel.gridPos.h)
                    content: {
                        "$ref": "#/spec/panels/\(grafanaPanelId)"
                    }
                }]
            }
        },
        // go through the top-level panels a 3rd time & match only the rows, to create the corresponding grids
        for grafanaPanelId, grafanaPanel in #grafanaDashboard.panels if grafanaPanel.panels != _|_ { // if the panel is a row
            #row: grafanaPanel
            kind: "Grid"
            spec: {
                display: {
                    title: #row.title,
                    collapse: {
                        open: !#row.collapsed
                    }
                }
                // go through the children panels of the current row
                items: [ for innerPanelId, innnerPanel in #row.panels {
                    // it may happen that a grafana panel coordinate has a decimal
                    x: math.Round(innnerPanel.gridPos.x)
                    y: math.Round(innnerPanel.gridPos.y)
                    width: math.Round(innnerPanel.gridPos.w)
                    height: math.Round(innnerPanel.gridPos.h)
                    content: {
                        "$ref": "#/spec/panels/\(grafanaPanelId)_\(innerPanelId)"
                    }
                }]
            }
        }
    ]
}
