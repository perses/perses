// Copyright 2023 The Perses Authors
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { PrometheusDatasource } from '@perses-dev/prometheus-plugin';

type PrometheusClient = ReturnType<typeof PrometheusDatasource['createClient']>;
type RangeQuery = Awaited<ReturnType<PrometheusClient['rangeQuery']>>;

type MockStableValueResultConfig = {
  metric: Record<string, string>;
  value: string;
};

type MockStableValueConfig = {
  metrics: MockStableValueResultConfig[];
  startTimeMs: number;
  endTimeMs: number;
  count?: number;
};

export function mockTimeSeriesResponseWithStableValue({
  metrics,
  startTimeMs,
  endTimeMs,
  count = 1000,
}: MockStableValueConfig): RangeQuery {
  // Taking time in as milliseconds because that's the unit generated by Date.now
  // in JS (i.e. mostly what the test code is going). Converting to seconds because
  // that's the unit used in prometheus responses.
  const startTimeS = Math.floor(startTimeMs / 1000);
  const endTimeS = Math.floor(endTimeMs / 1000);
  const stepSize = Math.floor((endTimeS - startTimeS) / count);

  return {
    status: 'success',
    data: {
      resultType: 'matrix',
      result: metrics.map(({ metric, value }) => {
        return {
          metric,
          values: [...Array(count)].map((_, i) => {
            // Use the end time for the last item to make sure we include it in
            // cases where the step size would lead to a lower value because of
            // rounding.
            const timestamp = i < count - 1 ? startTimeS + i * stepSize : endTimeS;

            return [timestamp, value];
          }),
        };
      }),
    },
  };
}
